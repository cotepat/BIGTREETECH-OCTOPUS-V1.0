# This file contains common pin mappings for the BigTreeTech OctoPus V1.
# To use this config, the firmware should be compiled for the STM32F446 with a "32KiB bootloader"
# Enable "extra low-level configuration options" and select the "12MHz crystal" as clock reference
[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_0C0026000B50534841313020-if00

[printer]
kinematics: cartesian
max_velocity: 500
max_accel: 3000
max_z_velocity: 12
max_z_accel: 5

# Octopus DRIVER0 - MOTOR0
[stepper_x]
step_pin: PF13          # Octopus - DRIVER0 STEP pin
dir_pin: PF12           # Octopus - DRIVER0 DIR pin
enable_pin: !PF14       # Octopus - DRIVER0 EN pin
microsteps: 16
rotation_distance: 40
endstop_pin: ^PG6       # Octopus - DIAG0 pin
position_endstop: 0
position_max: 220
homing_speed: 50

[tmc2209 stepper_x]
uart_pin: PC4           # Octopus - DRIVER0 CS pin
run_current: 0.800
hold_current: 0.500
stealthchop_threshold: 999999

# Octopus DRIVER1 - MOTOR1
[stepper_y]
step_pin: PG0           # Octopus - DRIVER1 STEP pin
dir_pin: PG1            # Octopus - DRIVER1 DIR pin
enable_pin: !PF15       # Octopus - DRIVER1 EN pin
microsteps: 16
rotation_distance: 40
endstop_pin: PG9        # Octopus - DIAG1 pin
position_endstop: 0
position_max: 250
homing_speed: 50

[tmc2209 stepper_y]
uart_pin: PD11          # Octopus - DRIVER1 CS pin
run_current: 0.800
hold_current: 0.500
stealthchop_threshold: 999999

# Octopus DRIVER2 - MOTOR2_1
[stepper_z]
step_pin: PF11          # Octopus - DRIVER2 STEP pin
dir_pin: PG3            # Octopus - DRIVER2 DIR pin
enable_pin: !PG5        # Octopus - DRIVER2 EN pin
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_max: 200
homing_speed: 12
second_homing_speed: 1

[tmc2208 stepper_z]
uart_pin: PC6           # Octopus - DRIVER2 CS pin
run_current: 0.650
hold_current: 0.450
stealthchop_threshold: 999999

# Octopus DRIVER3 - MOTOR3
[stepper_z1]
step_pin: PG4           # Octopus - DRIVER3 STEP pin
dir_pin: PC1            # Octopus - DRIVER3 DIR pin
enable_pin: !PA0        # Octopus - DRIVER3 EN pin
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop

[tmc2209 stepper_z1]
uart_pin: PC7           # Octopus - DRIVER3 CS pin
run_current: 0.650
hold_current: 0.450
stealthchop_threshold: 999999

# Octopus DRIVER4 - MOTOR4
[extruder]
step_pin: PF9           # Octopus - DRIVER4 STEP pin
dir_pin: PF10           # Octopus - DRIVER4 DIR pin
enable_pin: !PG2        # Octopus - DRIVER4 EN pin
heater_pin: PA2         # Octopus - HE0 24V output
sensor_pin:  PF4        # Octopus - T0 pin
microsteps: 16
rotation_distance: 7.824
nozzle_diameter: 0.400
filament_diameter: 1.750
sensor_type: EPCOS 100K B57560G104F
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
min_temp: -273
max_temp: 305

[tmc2209 extruder]
uart_pin: PF2           # Octopus - DRIVER4 CS pin
run_current: 0.800
hold_current: 0.500
stealthchop_threshold: 999999

# Octopus DRIVER5 - MOTOR5
[extruder1]
step_pin: PC13          # Octopus - DRIVER5 STEP pin
dir_pin: PF0            # Octopus - DRIVER5 DIR pin
enable_pin: !PF1        # Octopus - DRIVER5 EN pin
heater_pin: PA3         # Octopus - HE1 24V output
sensor_pin: PF5         # Octopus - T1 pin
microsteps: 16
rotation_distance: 7.824
nozzle_diameter: 0.400
filament_diameter: 1.750
sensor_type: EPCOS 100K B57560G104F
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
min_temp: -273
max_temp: 305

[tmc2209 extruder1]
uart_pin: PE4           # Octopus - DRIVER5 CS pin
run_current: 0.800
hold_current: 0.500
stealthchop_threshold: 999999

# Heater (110V through SSR)
[heater_bed]
heater_pin: PA1         # Octopus - BED_OUT 24V output
sensor_pin: PF3         # Octopus - TB pin
sensor_type: EPCOS 100K B57560G104F
control: watermark
min_temp: -273
max_temp: 130

# Part fan for extruder1
[fan]
pin: PA8                # Octopus - CNC_FAN0 pin

# Heater fan for extruder1
[heater_fan fan]
pin: PE5                # Octopus - CNC_FAN1 pin

# Part fan for extruder2
#[fan1]
#pin: PD12               # Octopus - CNC_FAN2 pin

# Heater fan for extruder2
#[heater_fan fan1]
#pin: PD13               # Octopus - CNC_FAN3 pin

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[bltouch]
z_offset: 0
sensor_pin: ^PB6        # Octopus BL_TOUCH connector
control_pin: PB7        # Octopus BL_TOUCH connector
pin_move_time: 0.2
probe_with_touch_mode: True
pin_up_touch_mode_reports_triggered: False

[virtual_sdcard]
path: ~/virtual_sdcard

[pause_resume]

[display_status]

# FUTURE #
#define FIL_RUNOUT_PIN                      PG12  // E0DET
#define FIL_RUNOUT2_PIN                     PG13  // E1DET
#define FIL_RUNOUT3_PIN                     PG14  // E2DET
#define FIL_RUNOUT4_PIN                     PG15  // E3DET

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

  [gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE